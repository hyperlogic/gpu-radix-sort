#version 460

#define WORKGROUP_SIZE 256
#define THREAD_IDX     gl_LocalInvocationIndex
#define PARTITION_IDX  gl_WorkGroupID.x + gl_NumWorkGroups.x * (gl_WorkGroupID.y + gl_NumWorkGroups.z * gl_WorkGroupID.z)
#define PARTITION_NUM  gl_NumWorkGroups.x + gl_NumWorkGroups.y + gl_NumWorkGroups.z
#define PARTITION_SIZE WORKGROUP_SIZE
#define BITSET_NUM     4
#define BITSET_SIZE    uint(exp2(BITSET_NUM))

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ssbo_key  { uint b_key_buf[];  };
//layout(std430, binding = 1) buffer ssbo_val { uint b_val_buf[]; };

layout(std430, binding = 2) buffer ssbo_part_addr { uint b_part_addr_buf[]; };
layout(std430, binding = 3) buffer ssbo_addr      { uint b_addr_buf[]; };

uniform uint u_arr_size;
uniform uint u_bitset_idx;

shared uint s_partition_buf[2][PARTITION_SIZE][BITSET_SIZE];

uint calc_abs_idx(uint part_idx, uint local_idx)
{
    return part_idx * PARTITION_SIZE + local_idx;
}

uint calc_addr_idx(uint part_idx, uint local_idx, uint bit_idx)
{
    return calc_abs_idx(part_idx, local_idx) * BITSET_SIZE + bit_idx;
}

//

void main()
{
    uint abs_idx = calc_abs_idx(PARTITION_IDX, THREAD_IDX);

    for (uint i = 0; i < BITSET_SIZE; i++)
    {
        // Pred
        uint bitset_mask = (BITSET_SIZE - 1) << (BITSET_NUM * u_bitset_idx);
        uint bitset_val = i << (BITSET_NUM * u_bitset_idx);

        bool pred = (b_key_buf[abs_idx] & bitset_mask) == bitset_val;
        s_partition_buf[0][THREAD_IDX][i] = pred ? 1 : 0;

        barrier();

        // Scan
        uint j;
        for (j = 0; j < uint(log2(u_arr_size)); j++)
        {
            uint step = uint(exp2(j));

            uint f_idx = THREAD_IDX;
            uint t_idx = THREAD_IDX + step;

            if (f_idx < step) { // Copy
                s_partition_buf[(j + 1) % 2][f_idx][i] = s_partition_buf[j % 2][f_idx][i];
            }

            if (t_idx < PARTITION_SIZE) { // Sum
                s_partition_buf[(j + 1) % 2][t_idx][i] = s_partition_buf[j % 2][f_idx][i] + s_partition_buf[j % 2][t_idx][i];
            }

            barrier();
        }

        // Write address
        uint addr_idx = calc_addr_idx(PARTITION_IDX, THREAD_IDX, i);
        uint addr = s_partition_buf[j % 2][THREAD_IDX][i];

        b_part_addr_buf[addr_idx] = addr;
        b_addr_buf[addr_idx] = addr;
    }
}
